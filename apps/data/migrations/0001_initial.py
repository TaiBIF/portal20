# Generated by Django 3.0.1 on 2020-01-09 11:09

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatasetOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('occurrence_id', models.TextField(blank=True, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, null=True)),
                ('occurrence_status', models.TextField(blank=True, null=True)),
                ('institution_id', models.TextField(blank=True, null=True)),
                ('institution_code', models.TextField(blank=True, null=True)),
                ('owner_institution_code', models.TextField(blank=True, null=True)),
                ('collection_id', models.TextField(blank=True, null=True)),
                ('collection_code', models.TextField(blank=True, null=True)),
                ('catalog_number', models.BigIntegerField(blank=True, null=True)),
                ('other_catalog_numbers', models.TextField(blank=True, null=True)),
                ('record_number', models.TextField(blank=True, null=True)),
                ('recorded_by', models.TextField(blank=True, null=True)),
                ('field_number', models.TextField(blank=True, null=True)),
                ('field_notes', models.TextField(blank=True, null=True)),
                ('basis_of_record', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(blank=True, null=True)),
                ('dataset_name', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, null=True)),
                ('type_field', models.TextField(blank=True, null=True)),
                ('type_status', models.TextField(blank=True, null=True)),
                ('coreid', models.TextField(blank=True, null=True)),
                ('life_stage', models.TextField(blank=True, null=True)),
                ('event_time', models.TextField(blank=True, null=True)),
                ('event_remarks', models.TextField(blank=True, null=True)),
                ('year', models.TextField(blank=True, null=True)),
                ('month', models.TextField(blank=True, null=True)),
                ('day', models.TextField(blank=True, null=True)),
                ('start_day_of_year', models.TextField(blank=True, null=True)),
                ('end_day_of_year', models.TextField(blank=True, null=True)),
                ('event_date', models.TextField(blank=True, null=True)),
                ('event_id', models.TextField(blank=True, null=True)),
                ('verbatim_event_date', models.TextField(blank=True, null=True)),
                ('verbatim_depth', models.TextField(blank=True, null=True)),
                ('kingdom', models.TextField(blank=True, null=True)),
                ('phylum', models.TextField(blank=True, null=True)),
                ('class_field', models.TextField(blank=True, null=True)),
                ('order_field', models.TextField(blank=True, null=True)),
                ('family', models.TextField(blank=True, null=True)),
                ('genus', models.TextField(blank=True, null=True)),
                ('subgenus', models.TextField(blank=True, null=True)),
                ('vernacular_name', models.TextField(blank=True, null=True)),
                ('scientific_name', models.TextField(blank=True, null=True)),
                ('scientific_name_id', models.TextField(blank=True, null=True)),
                ('taxon_rank', models.TextField(blank=True, null=True)),
                ('taxon_id', models.TextField(blank=True, null=True)),
                ('verbatim_taxon_rank', models.TextField(blank=True, null=True)),
                ('associated_taxa', models.TextField(blank=True, null=True)),
                ('specific_epithet', models.TextField(blank=True, null=True)),
                ('scientific_name_authorship', models.TextField(blank=True, null=True)),
                ('accepted_name_usage', models.TextField(blank=True, null=True)),
                ('accepted_name_usage_id', models.TextField(blank=True, null=True)),
                ('original_name_usage', models.TextField(blank=True, null=True)),
                ('name_according_to', models.TextField(blank=True, null=True)),
                ('higher_classification', models.TextField(blank=True, null=True)),
                ('taxon_remarks', models.TextField(blank=True, null=True)),
                ('date_identified', models.TextField(blank=True, null=True)),
                ('identification_qualifier', models.TextField(blank=True, null=True)),
                ('identified_by', models.TextField(blank=True, null=True)),
                ('identification_verification_status', models.TextField(blank=True, null=True)),
                ('previous_identifications', models.TextField(blank=True, null=True)),
                ('county', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('country_code', models.TextField(blank=True, null=True)),
                ('state_province', models.TextField(blank=True, null=True)),
                ('locality', models.TextField(blank=True, null=True)),
                ('location_id', models.TextField(blank=True, null=True)),
                ('higher_geography', models.TextField(blank=True, null=True)),
                ('georeferenced_date', models.TextField(blank=True, null=True)),
                ('georeference_sources', models.TextField(blank=True, null=True)),
                ('georeferenced_by', models.TextField(blank=True, null=True)),
                ('geodetic_datum', models.TextField(blank=True, null=True)),
                ('georeference_protocol', models.TextField(blank=True, null=True)),
                ('georeference_remarks', models.TextField(blank=True, null=True)),
                ('georeference_verification_status', models.TextField(blank=True, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, null=True)),
                ('decimal_latitude', models.FloatField(blank=True, null=True)),
                ('verbatim_latitude', models.TextField(blank=True, null=True)),
                ('verbatim_longitude', models.TextField(blank=True, null=True)),
                ('verbatim_locality', models.TextField(blank=True, null=True)),
                ('verbatim_coordinates', models.TextField(blank=True, null=True)),
                ('coordinate_uncertainty_in_meters', models.TextField(blank=True, null=True)),
                ('verbatim_coordinate_system', models.TextField(blank=True, null=True)),
                ('coordinate_precision', models.TextField(blank=True, null=True)),
                ('location_according_to', models.TextField(blank=True, null=True)),
                ('point_radius_spatial_fit', models.TextField(blank=True, null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('rights_holder', models.TextField(blank=True, null=True)),
                ('license_field', models.TextField(blank=True, null=True)),
                ('preparations', models.TextField(blank=True, null=True)),
                ('id_field', models.TextField(blank=True, null=True)),
                ('modified', models.TextField(blank=True, null=True)),
                ('data_generalizations', models.TextField(blank=True, null=True)),
                ('organism_id', models.TextField(blank=True, null=True)),
                ('organism_quantity_type', models.TextField(blank=True, null=True)),
                ('organism_quantity', models.TextField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('individual_count', models.BigIntegerField(blank=True, null=True)),
                ('verbatim_elevation', models.BigIntegerField(blank=True, null=True)),
                ('minimum_elevation_in_meters', models.TextField(blank=True, null=True)),
                ('maximum_elevation_in_meters', models.TextField(blank=True, null=True)),
                ('minimum_depth_in_meters', models.TextField(blank=True, null=True)),
                ('maximum_depth_in_meters', models.TextField(blank=True, null=True)),
                ('water_body', models.TextField(blank=True, null=True)),
                ('island', models.TextField(blank=True, null=True)),
                ('habitat', models.TextField(blank=True, null=True)),
                ('reproductive_condition', models.TextField(blank=True, null=True)),
                ('continent', models.TextField(blank=True, null=True)),
                ('infraspecific_epithet', models.TextField(blank=True, null=True)),
                ('footprint_wkt', models.TextField(blank=True, null=True)),
                ('associated_media', models.TextField(blank=True, null=True)),
                ('associated_sequences', models.TextField(blank=True, null=True)),
                ('associated_references', models.TextField(blank=True, null=True)),
                ('nomenclatural_code', models.TextField(blank=True, null=True)),
                ('footprint_spatial_fit', models.TextField(blank=True, null=True)),
                ('establishment_means', models.TextField(blank=True, null=True)),
                ('behavior', models.TextField(blank=True, null=True)),
                ('information_withheld', models.TextField(blank=True, null=True)),
                ('island_group', models.TextField(blank=True, null=True)),
                ('municipality', models.TextField(blank=True, null=True)),
                ('material_sample_id', models.TextField(blank=True, null=True)),
                ('sampling_protocol', models.TextField(blank=True, null=True)),
                ('sampling_effort', models.TextField(blank=True, null=True)),
                ('disposition', models.TextField(blank=True, null=True)),
                ('references', models.TextField(blank=True, null=True)),
                ('name_published_in_year', models.TextField(blank=True, null=True)),
                ('name_published_in', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaxonTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('rank_map', models.CharField(max_length=256, verbose_name='rank map')),
            ],
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.CharField(max_length=32, verbose_name='rank')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('name_zh', models.CharField(max_length=128, verbose_name='name_zh')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='count')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Taxon')),
                ('tree', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.TaxonTree')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='title')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('description', models.TextField(verbose_name='Description')),
                ('author', models.CharField(max_length=128, verbose_name='author')),
                ('pub_date', models.DateTimeField(null=True, verbose_name='Publish Date')),
                ('mod_date', models.DateTimeField(null=True, verbose_name='Modified Date')),
                ('guid', models.CharField(max_length=40, verbose_name='GUID')),
                ('status', models.CharField(choices=[('Public', 'Public'), ('Private', 'Private')], max_length=10, verbose_name='status')),
                ('guid_verbatim', models.CharField(max_length=100, verbose_name='GUID')),
                ('dwc_core_type', models.CharField(max_length=128, verbose_name='Dw-C Core Type')),
                ('data_license', models.CharField(max_length=128, verbose_name='Data License')),
                ('cite', models.TextField(blank=True, null=True)),
                ('version', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('collection_id', models.TextField(blank=True, null=True)),
                ('gbif_cite', models.TextField(blank=True, null=True)),
                ('gbif_doi', models.TextField(blank=True, null=True)),
                ('gbif_mod_date', models.DateTimeField(null=True, verbose_name='Modified Date from gbif')),
                ('organization_verbatim', models.TextField(blank=True, null=True)),
                ('num_record', models.PositiveIntegerField(default=0)),
                ('num_occurrence', models.PositiveIntegerField(default=0)),
                ('extension_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('is_most_project', models.BooleanField(default=False, verbose_name='是否為科技部計畫')),
                ('quality', models.CharField(default='', max_length=4, verbose_name='資料集品質')),
                ('organization_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.DatasetOrganization')),
            ],
        ),
    ]

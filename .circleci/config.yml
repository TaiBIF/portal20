version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point 
    # directory where steps are run
    working_directory: ~/taibif-code
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.8
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          ENV: test
          DEBUG: True
          SECRET_KEY: no-secret
          ALLOWED_HOSTS: 127.0.0.1
          STATIC_ROOT: ../../taibif-volumes/static
          MEDIA_ROOT: ../../taibif-volumes/media
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:12
        environment: # environment variables for the Postgres container.
          POSTGRES_USER: root
          POSTGRES_PASSWORD: example
          POSTGRES_DB: circle_test
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "venv"
      - run:
          command: |
            pipenv run python manage.py test
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: tr1
  deploy:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints: "bf:51:c5:ef:ca:95:ab:ca:3a:9c:7d:fd:eb:01:e3:ef"
      - run:
          command: |
            ssh $SSH_USER@$SSH_HOST "cd portal20; git pull;docker-compose -f docker-compose.yml -f docker-compose-staging.yml down; docker-compose -f docker-compose.yml -f docker-compose-staging.yml up -d"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          filters:
            branches:
              only:
                - develop
                - master
          requires:
            - build # only deploy once build job has completed

# fingerprint SHA256:OkiW9csb6vcuqn2n1j5+nAZM0AglKJUKb5SWulGthqc.
#cb:6b:2f:bb:f3:f1:c7:98:81:a1:b9:81:77:38:8d:81s github deploy
#02:a1:0c:4a:67:8d:00:a3:ef:c6:1d:a5:76:e1:5f:fe # stag